import _file_.HMMMatcher._
import _file_.Scores._

def profile(variable: Val[Double], number: Int) = {
    val exploration =
       GenomeProfile (
         x = variable,
         nX = number,
         genome =
            Seq(
              selection in (0.0, 50.0),
              stroke_length in (1.0, 11.0),
              resampling in (0.0, 1.0),
              lpsolving in (0.0, 1.0)
              ),
         objective = score,
         stochastic = Stochastic(seed = myseed, reevaluate = 0.1)
       )
       
    val evolution =
      SteadyStateEvolution(
        algorithm = exploration,
        evaluation = (hmmmatcherTask -- scoresTask),
        parallelism = 10,
        termination = 1000
    )
    
    val savePopulationHook = SavePopulationHook(evolution, workDirectory / s"results/${variable.name}" )
    val display = DisplayHook("Variable ${" + variable.name + "} - Generation ${" + evolution.generation.name + "}")
    (evolution on env hook savePopulationHook hook display)
}
//EmptyTask() -- (profile(stroke_length, 10), profile(resampling, 2), profile(lpsolving, 2)) 
//EmptyTask() -- (profile(selection, 50))
EmptyTask() -- (profile(selection, 100), profile(stroke_length, 10), profile(resampling, 2), profile(lpsolving, 2)) 